{"version":3,"sources":["components/SingleCard.js","components/Legend.js","components/GameOverDialog.js","App.js","index.js"],"names":["SingleCard","_ref","card","handleChoice","flipped","disabled","index","gameComplete","filepath","window","location","origin","pathname","_jsxs","className","children","_jsx","src","concat","alt","onClick","cardStyle","p","textAlign","borderRadius","Legend","moves","totalMoves","totalRounds","accuracy","Card","sx","Box","Typography","variant","GameOverDialog","open","handleClose","Dialog","onClose","DialogTitle","id","DialogContent","DialogContentText","DialogActions","Button","size","textTransform","cardImages","matched","styles","button","background","color","mt","ml","backgroundColor","App","_useState","useState","_useState2","_slicedToArray","cards","setCards","_useState3","_useState4","setMoves","_useState5","_useState6","totalMatched","setTotalMatched","_useState7","parseInt","localStorage","getItem","_useState8","setTotalRounds","_useState9","_useState10","setAccuracy","_useState11","_useState12","gameOver","setGameOver","_useState13","_useState14","setGameComplete","_useState15","_useState16","choiceOne","setChoiceOne","_useState17","_useState18","choiceTwo","setChoiceTwo","_useState19","_useState20","setDisabled","shuffleCards","shuffledCards","sort","Math","random","map","_objectSpread","useEffect","prevCards","resetTurn","setTimeout","prevmoves","setItem","display","ReplayIcon","fontSize","mr","removeItem","i","container","document","getElementById","createRoot","render","React","StrictMode"],"mappings":"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","file":"static/js/main.680f65cc.chunk.js","sourcesContent":["import './SingleCard.css';\n\nexport default function SingleCard({\n\tcard,\n\thandleChoice,\n\tflipped,\n\tdisabled,\n\tindex,\n\tgameComplete,\n}) {\n\tconst handleClick = () => {\n\t\tif (!disabled) {\n\t\t\thandleChoice(card);\n\t\t}\n\t};\n\tconst filepath = window.location.origin + window.location.pathname;\n\n\treturn (\n\t\t<div\n\t\t\tclassName={\n\t\t\t\tgameComplete ? 'card completed' : flipped ? 'card flipped' : 'card'\n\t\t\t}\n\t\t>\n\t\t\t<img className='front' src={`${filepath}${card.src}`} alt='card front' />\n\t\t\t<img\n\t\t\t\tclassName='back'\n\t\t\t\tsrc={`${filepath}/images/cover.svg`}\n\t\t\t\tonClick={handleClick}\n\t\t\t\talt='card back'\n\t\t\t/>\n\t\t\t<img\n\t\t\t\tclassName='alphabet'\n\t\t\t\tsrc={`${filepath}/images/cards-complete/card-${index + 1}-complete.svg`}\n\t\t\t\talt='card complete'\n\t\t\t/>\n\t\t</div>\n\t);\n}\n","import { Box, Card, Typography } from '@mui/material';\n\nconst cardStyle = {\n\tp: '15px',\n\ttextAlign: 'center',\n\tborderRadius: '8px',\n};\nexport default function Legend({ moves, totalMoves, totalRounds, accuracy }) {\n\treturn (\n\t\t<Card sx={cardStyle}>\n\t\t\t<Box>\n\t\t\t\t<Typography variant='body2'>Moves : {moves}</Typography>\n\t\t\t</Box>\n\t\t\t<Box>\n\t\t\t\t<Typography variant='body2'>\n\t\t\t\t\tTotal Allowed Moves: {totalMoves}\n\t\t\t\t</Typography>\n\t\t\t</Box>\n\t\t\t<Box>\n\t\t\t\t<Typography variant='body2'>\n\t\t\t\t\tMoves Remaining: {totalMoves - moves}\n\t\t\t\t</Typography>\n\t\t\t</Box>\n\t\t\t<Box>\n\t\t\t\t<Typography variant='body2'>\n\t\t\t\t\tTotal Rounds Played : {totalRounds}\n\t\t\t\t</Typography>\n\t\t\t</Box>\n\t\t\t<Box>\n\t\t\t\t<Typography variant='body2'>Accuracy: {accuracy}</Typography>\n\t\t\t</Box>\n\t\t</Card>\n\t);\n}\n","import Dialog from '@mui/material/Dialog';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogContentText from '@mui/material/DialogContentText';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport Button from '@mui/material/Button';\n\nexport default function GameOverDialog({ open, handleClose }) {\n\treturn (\n\t\t<Dialog\n\t\t\topen={open}\n\t\t\tonClose={handleClose}\n\t\t\taria-labelledby='alert-dialog-title'\n\t\t\taria-describedby='alert-dialog-description'\n\t\t>\n\t\t\t<DialogTitle id='alert-dialog-title'>Game over</DialogTitle>\n\t\t\t<DialogContent>\n\t\t\t\t<DialogContentText id='alert-dialog-description'>\n\t\t\t\t\tMaximum number of moves reached!\n\t\t\t\t</DialogContentText>\n\t\t\t</DialogContent>\n\t\t\t<DialogActions>\n\t\t\t\t<Button\n\t\t\t\t\tvariant='text'\n\t\t\t\t\tsize='small'\n\t\t\t\t\tonClick={handleClose}\n\t\t\t\t\tsx={{ textTransform: 'capitalize' }}\n\t\t\t\t>\n\t\t\t\t\tPlay again\n\t\t\t\t</Button>\n\t\t\t</DialogActions>\n\t\t</Dialog>\n\t);\n}\n","import { useState, useEffect } from 'react';\nimport { Box, Button } from '@mui/material';\nimport ReplayIcon from '@mui/icons-material/Replay';\nimport SingleCard from './components/SingleCard';\nimport Legend from './components/Legend';\nimport Dialog from './components/GameOverDialog';\nimport './App.css';\n\nconst cardImages = [\n\t{ src: '/images/cards-front/card-1-turned.svg', matched: false },\n\t{ src: '/images/cards-front/card-2-turned.svg', matched: false },\n\t{ src: '/images/cards-front/card-3-turned.svg', matched: false },\n\t{ src: '/images/cards-front/card-4-turned.svg', matched: false },\n\t{ src: '/images/cards-front/card-5-turned.svg', matched: false },\n];\n\nconst styles = {\n\tbutton: {\n\t\tbackground: '#FFF',\n\t\tcolor: '#000',\n\t\ttextTransform: 'capitalize',\n\t\tborderRadius: '8px',\n\t\tmt: '20px',\n\t\tml: '5px',\n\t\t'&:hover': {\n\t\t\tbackgroundColor: '#fff',\n\t\t\tcolor: '#000',\n\t\t},\n\t},\n};\n\nfunction App() {\n\tconst [cards, setCards] = useState([]);\n\tconst [moves, setMoves] = useState(0);\n\tconst [totalMatched, setTotalMatched] = useState(0);\n\tconst [totalRounds, setTotalRounds] = useState(\n\t\tparseInt(localStorage.getItem('totalRounds')) || 0\n\t);\n\tconst [accuracy, setAccuracy] = useState(\n\t\tparseInt(localStorage.getItem('accuracy')) || 0\n\t); // accuracy = score\n\tconst [gameOver, setGameOver] = useState(false);\n\tconst [gameComplete, setGameComplete] = useState(false);\n\tconst [choiceOne, setChoiceOne] = useState(null);\n\tconst [choiceTwo, setChoiceTwo] = useState(null);\n\tconst [disabled, setDisabled] = useState(false);\n\n\tconst totalMoves = 10;\n\n\tconst shuffleCards = () => {\n\t\tconst shuffledCards = [...cardImages, ...cardImages]\n\t\t\t.sort(() => Math.random() - 0.5)\n\t\t\t.map(card => ({ ...card, id: Math.random() }));\n\t\tsetChoiceOne(null);\n\t\tsetChoiceTwo(null);\n\t\tsetCards(shuffledCards);\n\t\tsetMoves(0);\n\t\tsetGameComplete(false);\n\t};\n\n\tconst handleChoice = card => {\n\t\tchoiceOne ? setChoiceTwo(card) : setChoiceOne(card);\n\t};\n\n\tuseEffect(() => {\n\t\tif (choiceOne && choiceTwo) {\n\t\t\tsetDisabled(true);\n\t\t\tif (choiceOne.src === choiceTwo.src) {\n\t\t\t\tsetCards(prevCards => {\n\t\t\t\t\treturn prevCards.map(card => {\n\t\t\t\t\t\tif (card.src === choiceOne.src) {\n\t\t\t\t\t\t\treturn { ...card, matched: true };\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn card;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t\tsetTotalMatched(totalMatched => totalMatched + 1);\n\t\t\t\tresetTurn();\n\t\t\t} else {\n\t\t\t\tsetTimeout(() => resetTurn(), 1000);\n\t\t\t}\n\t\t}\n\t}, [choiceOne, choiceTwo]);\n\n\tconst resetTurn = () => {\n\t\tsetChoiceOne(null);\n\t\tsetChoiceTwo(null);\n\t\tsetMoves(prevmoves => prevmoves + 1);\n\t\tsetDisabled(false);\n\t};\n\n\tconst resetScore = () => {\n\t\tshuffleCards();\n\t\tlocalStorage.removeItem('totalRounds');\n\t\tlocalStorage.removeItem('accuracy');\n\t\tsetTotalRounds(0);\n\t\tsetAccuracy(0);\n\t};\n\n\tuseEffect(() => {\n\t\tshuffleCards();\n\t}, []);\n\n\tuseEffect(() => {\n\t\t// if all cards have been matched correctly\n\t\tif (totalMatched === 5) {\n\t\t\tsetTotalMatched(0);\n\t\t\tsetTotalRounds(totalRounds => totalRounds + 1);\n\t\t\tsetAccuracy(accuracy => accuracy + 1);\n\t\t\tsetGameComplete(true);\n\t\t}\n\t\t// eslint-disable-next-line\n\t}, [totalMatched]);\n\n\tuseEffect(() => {\n\t\tlocalStorage.setItem('accuracy', accuracy);\n\t}, [accuracy]);\n\n\tuseEffect(() => {\n\t\t// if total number of moves allowed exceeded\n\t\tif (moves > totalMoves) {\n\t\t\tsetGameOver(true);\n\t\t\tsetTotalRounds(totalRounds => totalRounds + 1);\n\t\t}\n\t}, [moves]);\n\n\tuseEffect(() => {\n\t\tlocalStorage.setItem('totalRounds', totalRounds);\n\t}, [totalRounds]);\n\n\tconst handleClose = () => {\n\t\tsetTotalMatched(0);\n\t\tsetGameOver(false);\n\t\tshuffleCards();\n\t};\n\n\treturn (\n\t\t<div className='App'>\n\t\t\t<Box sx={{ display: 'flex' }}>\n\t\t\t\t<Button\n\t\t\t\t\tvariant='contained'\n\t\t\t\t\tsize='small'\n\t\t\t\t\tonClick={shuffleCards}\n\t\t\t\t\tsx={styles.button}\n\t\t\t\t>\n\t\t\t\t\t<ReplayIcon fontSize='small' sx={{ mr: '3px' }} />\n\t\t\t\t\tReplay\n\t\t\t\t</Button>\n\t\t\t\t<Button\n\t\t\t\t\tvariant='contained'\n\t\t\t\t\tsize='small'\n\t\t\t\t\tonClick={resetScore}\n\t\t\t\t\tsx={styles.button}\n\t\t\t\t>\n\t\t\t\t\tReset Score\n\t\t\t\t</Button>\n\t\t\t</Box>\n\n\t\t\t<div className='container'>\n\t\t\t\t{cards.map((card, i) => (\n\t\t\t\t\t<SingleCard\n\t\t\t\t\t\tkey={card.id}\n\t\t\t\t\t\tcard={card}\n\t\t\t\t\t\thandleChoice={handleChoice}\n\t\t\t\t\t\tflipped={card === choiceOne || card === choiceTwo || card.matched}\n\t\t\t\t\t\tdisabled={disabled}\n\t\t\t\t\t\tindex={i}\n\t\t\t\t\t\tgameComplete={gameComplete}\n\t\t\t\t\t/>\n\t\t\t\t))}\n\t\t\t</div>\n\t\t\t<Legend\n\t\t\t\tmoves={moves}\n\t\t\t\ttotalMoves={totalMoves}\n\t\t\t\ttotalRounds={totalRounds}\n\t\t\t\taccuracy={accuracy}\n\t\t\t/>\n\t\t\t<Dialog open={gameOver} handleClose={handleClose} gameOver={gameOver} />\n\t\t</div>\n\t);\n}\n\nexport default App;\n","import React from 'react';\nimport { createRoot } from 'react-dom/client';\nimport App from './App';\n\nconst container = document.getElementById('root');\nconst root = createRoot(container);\n\nroot.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>\n);\n"],"sourceRoot":""}